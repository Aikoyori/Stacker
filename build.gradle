plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url("https://storage.googleapis.com/devan-maven/") }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include "net.devtech:Stacc:1.3.2"
	modRuntime(include("net.devtech:Stacc:1.3.2"))

	modApi("me.shedaniel.cloth:cloth-config-fabric:5.0.38") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modCompileOnly("com.terraformersmc:modmenu:${project.modmenu_version}") {
		transitive = false
	}

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 and upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

unifiedPublishing {
	project {
		changelog = "Added Config! \nTesting, this file was uploaded automatically by the unifiedPublishing plugin."
		releaseType = "release"
		gameVersions = ["1.18.2"]
		gameLoaders = ["fabric"]

		mainPublication tasks.remapJar // Declares the publicated jar

		relations {
			depends { // Mark as a required dependency
				curseforge = "fabric-api" // Optional, project slug
				modrinth = "fabric-api" // Optional, project slug or id
				curseforge = "cloth-config"
				modrinth = "cloth-config"
			}
			includes { // Mark as an included dependency
				curseforge = "stacc"
				// Stacc API isn't on Modrinth
			}
			optional { // Mark as an optional dependency
				curseforge = "modmenu"
				modrinth = "modmenu"
			}
		}

		var cfToken = System.getenv("CF_TOKEN")
		if (cfToken != null) {
			curseforge {
				token = cfToken
				id = "515415" // Required, must be a string, ID of CurseForge project
			}
		}

		var mrToken = System.getenv("MODRINTH_TOKEN")
		if (mrToken != null) {
			modrinth {
				token = mrToken
				id = "7pbXPVrB" // Required, must be a string, ID of Modrinth project
			}
		}
	}
}